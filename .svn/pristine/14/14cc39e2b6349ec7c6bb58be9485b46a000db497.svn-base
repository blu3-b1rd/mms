package com.mms.app.fragment;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.tabcarousel.BackScrollManager;
import com.android.tabcarousel.CarouselContainer;
import com.mms.MMSActivity;
import com.mms.MMSApplication;
import com.mms.MMSPreferences;
import com.mms.app.R;
import com.mms.model.MMSList;
import com.mms.model.MMSModel;
import com.mms.model.MMSResponse;
import com.mms.request.GetEventsRequest;
import com.mms.request.MMSAsyncRequest;
import com.mms.request.MMSAsyncRequest.OnMMSRequestFinishedListener;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;

public class ConcertsListFragment extends ListFragment
	implements OnMMSRequestFinishedListener {
	
	private CarouselContainer carouselHeader;
	
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		this.carouselHeader = (CarouselContainer) activity
				.findViewById(R.id.carousel_header);
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_concerts_list, container, false);
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		ListView listView = this.getListView();
		listView.setOnScrollListener(new BackScrollManager(this.carouselHeader, null,
				CarouselContainer.TAB_INDEX_SECOND));
		
		String cookie = MMSPreferences.loadString(MMSPreferences.COOKIE, null);
		new MMSAsyncRequest(this).execute(new GetEventsRequest(cookie));
	}
	
	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		// TODO
	}
	
	@Override
	public void onMMSRequestFinished(MMSResponse response) {
		this.getView().findViewById(R.id.progress_concerts)
			.setVisibility(View.GONE);
		try {
			switch(response.getStatus()){
			case MMSActivity.MMS_SUCCESS:
				this.onSuccessfulResponse(response);
				break;
			case MMSActivity.MMS_WRONG_COOKIE:
				this.onWrongCookie();
				break;
			default:
				this.onErrorResponse(response);
				break;
			}
		} catch(Exception e) {
			e.printStackTrace();
			this.onRequestFailed();
		}
	}
	
	protected void onSuccessfulResponse(MMSResponse response){
		this.getListView().setAdapter(
				new ConcertsAdapter(this.getActivity(),
						(MMSList) response.getContent()));
	}
	
	protected void onRequestFailed(){
		Toast.makeText(this.getActivity(), "Connection Failed",
				Toast.LENGTH_SHORT).show();
	}
	
	protected void onWrongCookie(){
		Toast.makeText(this.getActivity(), "Login again. Wrong Cookie",
				Toast.LENGTH_SHORT).show();
		((MMSApplication) this.getActivity().getApplication())
			.logout(this.getActivity());
	}
	
	protected void onErrorResponse(MMSResponse response) {
		Toast.makeText(this.getActivity(), response.getMessage(),
				Toast.LENGTH_SHORT).show();
	}
	
	private static final class ConcertsAdapter extends ArrayAdapter<MMSModel> {

        private static final int ITEM_VIEW_TYPE_HEADER = 0;
        private static final int ITEM_VIEW_TYPE_DATA = 1;
        private static final int VIEW_TYPE_COUNT = 2;
        
        private final View mHeader;
        private MMSList concertsList;
        private ImageLoader imageLoader;
        private DisplayImageOptions options;
        
        private class ViewHolder {
			public ImageView newsEntryImg;
			public TextView newsEntryTitle;
			public TextView newsEntryDate;
			public TextView newsEntryContent;
		}
        
        public ConcertsAdapter(Context context, MMSList concertsList) {
            super(context, R.layout.list_item_event, concertsList);
            
            this.concertsList = concertsList;
            this.mHeader = LayoutInflater.from(context).inflate(
            		R.layout.faux_carousel, null);
            this.imageLoader = ImageLoader.getInstance();
            this.options = new DisplayImageOptions.Builder()
            	.displayer(new FadeInBitmapDisplayer(800))
            	.showStubImage(R.drawable.default_news)
            	.showImageForEmptyUri(R.drawable.default_news)
            	.showImageOnFail(R.drawable.default_news)
            	.cacheInMemory()
            	.build();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (position == 0) {
                return this.mHeader;
            }
            
            View view = convertView;
            final ViewHolder holder;
            
            if (view == null) {
            	view = LayoutInflater.from(this.getContext())
            			.inflate(R.layout.list_item_event, parent, false);
            	
            	holder = new ViewHolder();
            	view.setTag(holder);
            } else {
                holder = (ViewHolder) view.getTag();
            }
            
            
            return view;
        }

        @Override
        public boolean hasStableIds() {
            return true;
        }

        @Override
        public int getCount() {
        	if(this.concertsList.size() == 0){
        		return 0;
        	} else {
        		return this.concertsList.size() + 1;
        	}
        }

        @Override
        public int getViewTypeCount() {
            return VIEW_TYPE_COUNT;
        }

        @Override
        public int getItemViewType(int position) {
            if (position == 0) {
                return ITEM_VIEW_TYPE_HEADER;
            }
            return ITEM_VIEW_TYPE_DATA;
        }
    }
	
}
