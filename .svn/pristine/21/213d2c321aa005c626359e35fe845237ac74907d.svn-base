package com.mms.app.fragment;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Locale;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.tabcarousel.BackScrollManager;
import com.android.tabcarousel.CarouselContainer;
import com.mms.MMSActivity;
import com.mms.MMSApplication;
import com.mms.MMSPreferences;
import com.mms.app.R;
import com.mms.app.fragment.dialog.NewsDetailsDialogFragment;
import com.mms.model.MMSList;
import com.mms.model.MMSModel;
import com.mms.model.MMSNewsEntry;
import com.mms.model.MMSResponse;
import com.mms.request.GetNewsRequest;
import com.mms.request.MMSAsyncRequest;
import com.mms.request.MMSAsyncRequest.OnMMSRequestFinishedListener;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;

public class NewsFragment extends ListFragment implements OnMMSRequestFinishedListener {

	private static final String TAG_NEWS_DETAILS_DIALOG = "news_details_dialog";
	
	private CarouselContainer carouselHeader;
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_news_list, container, false);
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		this.carouselHeader = (CarouselContainer) view.findViewById(R.id.carousel_header_reference);
		
		ListView listView = this.getListView();
		listView.setOnScrollListener(new BackScrollManager(this.carouselHeader, null,
				CarouselContainer.TAB_INDEX_FIRST));
		
		String cookie = MMSPreferences.loadString(MMSPreferences.COOKIE, null);
		new MMSAsyncRequest(this).execute(new GetNewsRequest(cookie));
	}
	
	@Override
    public void onListItemClick(ListView l, View v, int position, long id) {
    	FragmentTransaction transaction = this.getFragmentManager().beginTransaction();
    	Fragment prevDialog = this.getFragmentManager().findFragmentByTag(TAG_NEWS_DETAILS_DIALOG);
    	
    	if(prevDialog != null){
    		transaction.remove(prevDialog);
    	}
    	transaction.commit();
    	
    	Bundle metaData = new Bundle();
    	metaData.putSerializable(NewsDetailsDialogFragment.META_ENTRY,
    			(Serializable) this.getListAdapter().getItem(position));
    	
    	DialogFragment dialog = new NewsDetailsDialogFragment();
    	dialog.setArguments(metaData);
    	dialog.show(this.getFragmentManager(), TAG_NEWS_DETAILS_DIALOG);
    }
	
	@Override
	public void onMMSRequestFinished(MMSResponse response) {
		try {
			switch(response.getStatus()){
			case MMSActivity.MMS_SUCCESS:
				this.onSuccessfulResponse(response);
				break;
			case MMSActivity.MMS_WRONG_COOKIE:
				this.onWrongCookie();
				break;
			default:
				this.onErrorResponse(response);
				break;
			}
		} catch (Exception e){
			e.printStackTrace();
			this.onRequestFailed();
		}
	}
	
	protected void onSuccessfulResponse(MMSResponse response){
		this.setListAdapter(new NewsAdapter(this.getActivity(),
				(MMSList) response.getContent()));
	}
	
	protected void onRequestFailed(){
		Toast.makeText(this.getActivity(), "Connection Failed", Toast.LENGTH_SHORT).show();
	}
	
	protected void onWrongCookie(){
		Toast.makeText(this.getActivity(), "Login again. Wrong Cookie.", Toast.LENGTH_SHORT).show();
		((MMSApplication) this.getActivity().getApplication()).logout(this.getActivity());
	}
	
	protected void onErrorResponse(MMSResponse response){
		Toast.makeText(this.getActivity(), response.getMessage(), Toast.LENGTH_SHORT).show();
	}
	
	private static final class NewsAdapter extends ArrayAdapter<MMSModel> {

        private static final int ITEM_VIEW_TYPE_HEADER = 0;
        private static final int ITEM_VIEW_TYPE_DATA = 1;
        private static final int VIEW_TYPE_COUNT = 2;
        
        private static final String DATE_FORMAT = "dd/MM/yyyy";
        
        private final View mHeader;
        private MMSList newsList;
        private ImageLoader imageLoader;
        private DisplayImageOptions options;
        private SimpleDateFormat dateFormater;
        
        private class ViewHolder {
        	public ImageView newsEntryImg;
        	public TextView newsEntryTitle;
        	public TextView newsEntryDate;
        	public TextView newsEntryContent;
        }

        public NewsAdapter(Context context, MMSList newsList) {
            super(context, R.layout.list_item_news_entry, newsList);
            this.newsList = newsList;
            this.mHeader = LayoutInflater.from(context).inflate(R.layout.faux_carousel, null);
            this.dateFormater = new SimpleDateFormat(DATE_FORMAT, Locale.getDefault());
            this.imageLoader = ImageLoader.getInstance();
            this.options = new DisplayImageOptions.Builder()
				.showStubImage(R.drawable.default_news)
				.showImageForEmptyUri(R.drawable.default_news)
				.showImageOnFail(R.drawable.default_news)
				.cacheInMemory()
				.build();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (position == 0) {
                return this.mHeader;
            }

            View view = convertView;
            final ViewHolder holder;
            
            if (convertView == null) {
            	view = LayoutInflater.from(this.getContext()).inflate(
            			R.layout.list_item_news_entry, parent, false);
            	holder = new ViewHolder();
            	
            	holder.newsEntryImg = (ImageView) view.findViewById(R.id.img_news_entry);
            	holder.newsEntryTitle = (TextView) view.findViewById(R.id.lbl_news_title);
            	holder.newsEntryDate = (TextView) view.findViewById(R.id.lbl_news_date);
            	holder.newsEntryContent = (TextView) view.findViewById(R.id.news_entry_content);
            	
            	view.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }
            
            MMSNewsEntry entry = (MMSNewsEntry) this.newsList.get(position - 1);
            
            this.imageLoader.displayImage("", holder.newsEntryImg, this.options);
            holder.newsEntryTitle.setText(entry.getTitle());
            holder.newsEntryDate.setText(this.dateFormater.format(entry.getDate()));
            holder.newsEntryContent.setText(entry.getContent());
            
            return view;
        }

        @Override
        public int getCount() {
        	if(this.newsList.size() == 0){
        		return 0;
        	} else {
        		return this.newsList.size() + 1;
        	}
        }

        @Override
        public int getViewTypeCount() {
            return VIEW_TYPE_COUNT;
        }

        @Override
        public int getItemViewType(int position) {
            if (position == 0) {
                return ITEM_VIEW_TYPE_HEADER;
            }
            return ITEM_VIEW_TYPE_DATA;
        }
        
        @Override
        public MMSModel getItem(int position) {
        	return this.newsList.get(position - 1);
        }
    }

}
